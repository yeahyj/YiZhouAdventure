import { _decorator, Component, Enum, EventTouch, math, Node, UITransform, v3 } from 'cc';
const { ccclass, property, requireComponent, menu } = _decorator;

export enum RockerType {
    Static,
    Free,
}

export enum RockerEventType {
    Change = 'rocker-change',
    Stop = 'rocker-stop'
}

@ccclass('pkg:Rocker')
@menu('pkg/Rocker')
@requireComponent(UITransform)
export class Rocker extends Component {
    static Type = RockerType;
    static EventType = RockerEventType;

    @property({
        type: Enum(RockerType),
        tooltip: 'Static: 固定位置, 固定在原点\nFree: 自由位置, 跟随手指位置'
    })
    type: RockerType = RockerType.Free;

    @property({
        type: Node,
        tooltip: '底座节点'
    })
    pedestal: Node = null;

    @property({
        type: Node,
        tooltip: '摇杆节点'
    })
    joystick: Node = null;

    @property({
        tooltip: '摇杆半径'
    })
    radius = 100;

    @property({
        tooltip: '是否自动隐藏'
    })
    autoHide = true;

    public show(): void {
        this.joystick.active = true;
        this.pedestal.active = true;
    }

    public hide(): void {
        this.joystick.active = false;
        this.pedestal.active = false;
    }

    protected onEnable(): void {
        this.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this);
        this.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
        this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);
        this.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);
        if (this.autoHide) this.hide();
    }

    protected onDisable(): void {
        this.node.off(Node.EventType.TOUCH_START, this.onTouchStart, this);
        this.node.off(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
        this.node.off(Node.EventType.TOUCH_END, this.onTouchEnd, this);
        this.node.off(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);
    }

    protected onTouchStart(event: EventTouch): void {
        this.show();

        const location = event.getUILocation();
        const pos = this.node.inverseTransformPoint(v3(), v3(location.x, location.y, 0));

        if (this.type === RockerType.Free) {
            this.joystick.setPosition(pos.x, pos.y, 0);
            this.pedestal.setPosition(pos.x, pos.y, 0);
        } else if (this.type === RockerType.Static) {
            this.pedestal.setPosition(0, 0, 0);

            const radius = math.clamp(pos.length(), 0, this.radius);
            pos.normalize();// 归一化
            this.joystick.setPosition(pos.x * radius, pos.y * radius, 0);

            this.node.emit(RockerEventType.Change, pos, radius / this.radius);
        }
    }

    protected onTouchMove(event: EventTouch): void {
        const location = event.getUILocation();
        const pos = this.node.inverseTransformPoint(v3(), v3(location.x, location.y, 0));
        const delta = pos.subtract(this.pedestal.position);

        const radius = math.clamp(delta.length(), 0, this.radius);
        delta.normalize();// 归一化
        this.joystick.setPosition(this.pedestal.position.x + delta.x * radius, this.pedestal.position.y + delta.y * radius, 0);

        this.node.emit(RockerEventType.Change, delta, radius / this.radius);
    }

    protected onTouchEnd(): void {
        this.node.emit(RockerEventType.Stop);
        this.joystick.setPosition(this.pedestal.position);
        if (this.autoHide) this.hide();
    }

}

